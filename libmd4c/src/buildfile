./: lib{md4c}:      libul{md4c}:      {h c}{md4c}
./: lib{md4c-html}: libul{md4c-html}: {h c}{md4c-html entity} lib{md4c}

# Export all symbols from the DLL if on Windows.
#
libs{md4c}:      def{md4c}:      include = ($c.target.system == 'win32-msvc')
libs{md4c-html}: def{md4c-html}: include = ($c.target.system == 'win32-msvc')

def{md4c}:      libul{md4c}
def{md4c-html}: libul{md4c-html}

if ($c.target.system == 'mingw32')
  c.loptions += -Wl,--export-all-symbols

# Build options.
#
c.poptions =+ -DMD_VERSION_MAJOR="$version.major"   \
              -DMD_VERSION_MINOR="$version.minor"   \
              -DMD_VERSION_RELEASE="$version.patch" \

if $config.libmd4c.debug
  c.poptions += -DDEBUG

if ($c.class == 'msvc')
  c.poptions += -D_CRT_SECURE_NO_WARNINGS

obj{md4c}: c.poptions += -DMD4C_USE_UTF8

# Export options.
#
lib{md4c md4c-html}: c.export.poptions = "-I$src_base"

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
if $version.pre_release
  lib{md4c}: bin.lib.version = "-$version.project_id"
else
  lib{md4c}: bin.lib.version = "-$version.major.$version.minor"

# Install public headers directly into, say, /usr/include/.
#
h{entity}@./: install = false
h{*}:         install = include/
